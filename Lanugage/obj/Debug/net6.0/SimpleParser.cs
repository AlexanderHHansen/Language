//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ax111\Documents\PersonalDocuments\Coding\C#\Language\Lanugage\Content\Simple.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lanugage.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SimpleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, WHILE=9, 
		LBRACKET=10, RBRACKET=11, PRINT=12, LPAREN=13, RPAREN=14, AND=15, OR=16, 
		NOT=17, ARITHMETIC=18, ASSIGN=19, INT=20, FLOAT=21, BOOL=22, STRING=23, 
		NULL=24, INT_TYPE=25, FLOAT_TYPE=26, BOOL_TYPE=27, STRING_TYPE=28, ID=29, 
		WS=30;
	public const int
		RULE_program = 0, RULE_statementOrNewline = 1, RULE_statement = 2, RULE_newline = 3, 
		RULE_loop = 4, RULE_whileLoop = 5, RULE_print = 6, RULE_expression = 7, 
		RULE_cmpOp = 8, RULE_binaryBoolOp = 9, RULE_addOp = 10, RULE_multOp = 11, 
		RULE_atomExp = 12, RULE_assignment = 13, RULE_constant = 14, RULE_type = 15;
	public static readonly string[] ruleNames = {
		"program", "statementOrNewline", "statement", "newline", "loop", "whileLoop", 
		"print", "expression", "cmpOp", "binaryBoolOp", "addOp", "multOp", "atomExp", 
		"assignment", "constant", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", "'\r'", "'=='", "'!='", "'<'", "'>'", "'>='", "'<='", "'while'", 
		"'{'", "'}'", "'print'", "'('", "')'", "'and'", "'or'", "'!'", null, "'='", 
		null, null, null, null, "'null'", "'int'", "'float'", "'bool'", "'string'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "WHILE", "LBRACKET", 
		"RBRACKET", "PRINT", "LPAREN", "RPAREN", "AND", "OR", "NOT", "ARITHMETIC", 
		"ASSIGN", "INT", "FLOAT", "BOOL", "STRING", "NULL", "INT_TYPE", "FLOAT_TYPE", 
		"BOOL_TYPE", "STRING_TYPE", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SimpleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SimpleParser.Eof, 0); }
		public StatementOrNewlineContext[] statementOrNewline() {
			return GetRuleContexts<StatementOrNewlineContext>();
		}
		public StatementOrNewlineContext statementOrNewline(int i) {
			return GetRuleContext<StatementOrNewlineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << WHILE) | (1L << PRINT) | (1L << LPAREN) | (1L << NOT) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << NULL) | (1L << ID))) != 0)) {
				{
				{
				State = 32; statementOrNewline();
				}
				}
				State = 37;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 38; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementOrNewlineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public StatementOrNewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementOrNewline; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterStatementOrNewline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitStatementOrNewline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementOrNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementOrNewlineContext statementOrNewline() {
		StatementOrNewlineContext _localctx = new StatementOrNewlineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statementOrNewline);
		try {
			State = 42;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case WHILE:
			case PRINT:
			case LPAREN:
			case NOT:
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case NULL:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; statement();
				}
				break;
			case T__0:
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; newline();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 44; expression(0);
				}
				break;

			case 2:
				{
				State = 45; assignment();
				}
				break;

			case 3:
				{
				State = 46; loop();
				}
				break;

			case 4:
				{
				State = 47; print();
				}
				break;
			}
			State = 50; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterNewline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitNewline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_newline);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 52;
					_la = _input.La(1);
					if ( !(_la==T__0 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 55;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; whileLoop();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(SimpleParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(SimpleParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(SimpleParser.RBRACKET, 0); }
		public StatementOrNewlineContext[] statementOrNewline() {
			return GetRuleContexts<StatementOrNewlineContext>();
		}
		public StatementOrNewlineContext statementOrNewline(int i) {
			return GetRuleContext<StatementOrNewlineContext>(i);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(WHILE);
			State = 60; expression(0);
			State = 61; Match(LBRACKET);
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << WHILE) | (1L << PRINT) | (1L << LPAREN) | (1L << NOT) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << NULL) | (1L << ID))) != 0)) {
				{
				{
				State = 62; statementOrNewline();
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 68; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(SimpleParser.PRINT, 0); }
		public ITerminalNode LPAREN() { return GetToken(SimpleParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SimpleParser.RPAREN, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(PRINT);
			State = 71; Match(LPAREN);
			State = 72; expression(0);
			State = 73; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstExpContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterConstExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitConstExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdExpContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public IdExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterIdExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitIdExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(SimpleParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SimpleParser.RPAREN, 0); }
		public ParenExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterParenExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitParenExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpContext : ExpressionContext {
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AddExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterAddExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitAddExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CmpExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public CmpExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterCmpExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitCmpExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryBoolOpContext binaryBoolOp() {
			return GetRuleContext<BinaryBoolOpContext>(0);
		}
		public BinOpExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterBinOpExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitBinOpExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(SimpleParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterNotExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitNotExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				_localctx = new ConstExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 76; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 77; Match(ID);
				}
				break;

			case 3:
				{
				_localctx = new ParenExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 78; Match(LPAREN);
				State = 79; expression(0);
				State = 80; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new AddExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 82; addOp();
				}
				break;

			case 5:
				{
				_localctx = new NotExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 83; Match(NOT);
				State = 84; expression(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 97;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 95;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
					case 1:
						{
						_localctx = new CmpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 87;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 88; cmpOp();
						State = 89; expression(4);
						}
						break;

					case 2:
						{
						_localctx = new BinOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 91;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 92; binaryBoolOp();
						State = 93; expression(3);
						}
						break;
					}
					} 
				}
				State = 99;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterCmpOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitCmpOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_cmpOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryBoolOpContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(SimpleParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SimpleParser.OR, 0); }
		public BinaryBoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryBoolOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterBinaryBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitBinaryBoolOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryBoolOpContext binaryBoolOp() {
		BinaryBoolOpContext _localctx = new BinaryBoolOpContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_binaryBoolOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			_la = _input.La(1);
			if ( !(_la==AND || _la==OR) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public MultOpContext[] multOp() {
			return GetRuleContexts<MultOpContext>();
		}
		public MultOpContext multOp(int i) {
			return GetRuleContext<MultOpContext>(i);
		}
		public ITerminalNode[] ARITHMETIC() { return GetTokens(SimpleParser.ARITHMETIC); }
		public ITerminalNode ARITHMETIC(int i) {
			return GetToken(SimpleParser.ARITHMETIC, i);
		}
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_addOp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; multOp();
			State = 109;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 105; Match(ARITHMETIC);
					State = 106; multOp();
					}
					} 
				}
				State = 111;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public AtomExpContext[] atomExp() {
			return GetRuleContexts<AtomExpContext>();
		}
		public AtomExpContext atomExp(int i) {
			return GetRuleContext<AtomExpContext>(i);
		}
		public ITerminalNode[] ARITHMETIC() { return GetTokens(SimpleParser.ARITHMETIC); }
		public ITerminalNode ARITHMETIC(int i) {
			return GetToken(SimpleParser.ARITHMETIC, i);
		}
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_multOp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; atomExp();
			State = 117;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 113; Match(ARITHMETIC);
					State = 114; atomExp();
					}
					} 
				}
				State = 119;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomExpContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(SimpleParser.LPAREN, 0); }
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SimpleParser.RPAREN, 0); }
		public AtomExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitAtomExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomExpContext atomExp() {
		AtomExpContext _localctx = new AtomExpContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_atomExp);
		try {
			State = 126;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; constant();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; Match(ID);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 122; Match(LPAREN);
				State = 123; addOp();
				State = 124; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SimpleParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(ID);
			State = 129; Match(ASSIGN);
			State = 130; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(SimpleParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(SimpleParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(SimpleParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(SimpleParser.STRING, 0); }
		public ITerminalNode NULL() { return GetToken(SimpleParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << NULL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT_TYPE() { return GetToken(SimpleParser.INT_TYPE, 0); }
		public ITerminalNode FLOAT_TYPE() { return GetToken(SimpleParser.FLOAT_TYPE, 0); }
		public ITerminalNode BOOL_TYPE() { return GetToken(SimpleParser.BOOL_TYPE, 0); }
		public ITerminalNode STRING_TYPE() { return GetToken(SimpleParser.STRING_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_TYPE) | (1L << FLOAT_TYPE) | (1L << BOOL_TYPE) | (1L << STRING_TYPE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 3);

		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 \x8B\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x3\x2\a\x2$\n\x2\f\x2\xE\x2\'\v\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x5\x3-\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x33\n\x4\x3\x4\x3\x4"+
		"\x3\x5\x6\x5\x38\n\x5\r\x5\xE\x5\x39\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\a"+
		"\a\x42\n\a\f\a\xE\a\x45\v\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tX\n\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\a\t\x62\n\t\f\t\xE\t\x65\v\t\x3\n\x3\n\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\a\fn\n\f\f\f\xE\fq\v\f\x3\r\x3\r\x3\r\a\rv\n\r\f\r\xE"+
		"\ry\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x81\n\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x2\x2\x3\x10\x12\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\x2\a\x3\x2\x3\x4\x3\x2\x5\n\x3\x2\x11\x12\x3\x2"+
		"\x16\x1A\x3\x2\x1B\x1E\x8B\x2%\x3\x2\x2\x2\x4,\x3\x2\x2\x2\x6\x32\x3\x2"+
		"\x2\x2\b\x37\x3\x2\x2\x2\n;\x3\x2\x2\x2\f=\x3\x2\x2\x2\xEH\x3\x2\x2\x2"+
		"\x10W\x3\x2\x2\x2\x12\x66\x3\x2\x2\x2\x14h\x3\x2\x2\x2\x16j\x3\x2\x2\x2"+
		"\x18r\x3\x2\x2\x2\x1A\x80\x3\x2\x2\x2\x1C\x82\x3\x2\x2\x2\x1E\x86\x3\x2"+
		"\x2\x2 \x88\x3\x2\x2\x2\"$\x5\x4\x3\x2#\"\x3\x2\x2\x2$\'\x3\x2\x2\x2%"+
		"#\x3\x2\x2\x2%&\x3\x2\x2\x2&(\x3\x2\x2\x2\'%\x3\x2\x2\x2()\a\x2\x2\x3"+
		")\x3\x3\x2\x2\x2*-\x5\x6\x4\x2+-\x5\b\x5\x2,*\x3\x2\x2\x2,+\x3\x2\x2\x2"+
		"-\x5\x3\x2\x2\x2.\x33\x5\x10\t\x2/\x33\x5\x1C\xF\x2\x30\x33\x5\n\x6\x2"+
		"\x31\x33\x5\xE\b\x2\x32.\x3\x2\x2\x2\x32/\x3\x2\x2\x2\x32\x30\x3\x2\x2"+
		"\x2\x32\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\x35\x5\b\x5\x2\x35\a\x3"+
		"\x2\x2\x2\x36\x38\t\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39"+
		"\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:\t\x3\x2\x2\x2;<\x5\f\a\x2<\v\x3\x2"+
		"\x2\x2=>\a\v\x2\x2>?\x5\x10\t\x2?\x43\a\f\x2\x2@\x42\x5\x4\x3\x2\x41@"+
		"\x3\x2\x2\x2\x42\x45\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2"+
		"\x2\x44\x46\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x46G\a\r\x2\x2G\r\x3\x2\x2"+
		"\x2HI\a\xE\x2\x2IJ\a\xF\x2\x2JK\x5\x10\t\x2KL\a\x10\x2\x2L\xF\x3\x2\x2"+
		"\x2MN\b\t\x1\x2NX\x5\x1E\x10\x2OX\a\x1F\x2\x2PQ\a\xF\x2\x2QR\x5\x10\t"+
		"\x2RS\a\x10\x2\x2SX\x3\x2\x2\x2TX\x5\x16\f\x2UV\a\x13\x2\x2VX\x5\x10\t"+
		"\x3WM\x3\x2\x2\x2WO\x3\x2\x2\x2WP\x3\x2\x2\x2WT\x3\x2\x2\x2WU\x3\x2\x2"+
		"\x2X\x63\x3\x2\x2\x2YZ\f\x5\x2\x2Z[\x5\x12\n\x2[\\\x5\x10\t\x6\\\x62\x3"+
		"\x2\x2\x2]^\f\x4\x2\x2^_\x5\x14\v\x2_`\x5\x10\t\x5`\x62\x3\x2\x2\x2\x61"+
		"Y\x3\x2\x2\x2\x61]\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2"+
		"\x63\x64\x3\x2\x2\x2\x64\x11\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66g\t\x3"+
		"\x2\x2g\x13\x3\x2\x2\x2hi\t\x4\x2\x2i\x15\x3\x2\x2\x2jo\x5\x18\r\x2kl"+
		"\a\x14\x2\x2ln\x5\x18\r\x2mk\x3\x2\x2\x2nq\x3\x2\x2\x2om\x3\x2\x2\x2o"+
		"p\x3\x2\x2\x2p\x17\x3\x2\x2\x2qo\x3\x2\x2\x2rw\x5\x1A\xE\x2st\a\x14\x2"+
		"\x2tv\x5\x1A\xE\x2us\x3\x2\x2\x2vy\x3\x2\x2\x2wu\x3\x2\x2\x2wx\x3\x2\x2"+
		"\x2x\x19\x3\x2\x2\x2yw\x3\x2\x2\x2z\x81\x5\x1E\x10\x2{\x81\a\x1F\x2\x2"+
		"|}\a\xF\x2\x2}~\x5\x16\f\x2~\x7F\a\x10\x2\x2\x7F\x81\x3\x2\x2\x2\x80z"+
		"\x3\x2\x2\x2\x80{\x3\x2\x2\x2\x80|\x3\x2\x2\x2\x81\x1B\x3\x2\x2\x2\x82"+
		"\x83\a\x1F\x2\x2\x83\x84\a\x15\x2\x2\x84\x85\x5\x10\t\x2\x85\x1D\x3\x2"+
		"\x2\x2\x86\x87\t\x5\x2\x2\x87\x1F\x3\x2\x2\x2\x88\x89\t\x6\x2\x2\x89!"+
		"\x3\x2\x2\x2\r%,\x32\x39\x43W\x61\x63ow\x80";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Lanugage.Content
