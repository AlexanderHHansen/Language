//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ax111\Documents\PersonalDocuments\Coding\C#\Language\Lanugage\Content\Simple.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lanugage.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SimpleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, VAR=9, 
		WHILE=10, LBRACKET=11, RBRACKET=12, PRINT=13, LPAREN=14, RPAREN=15, ASSIGN=16, 
		INT=17, FLOAT=18, BOOL=19, STRING=20, NULL=21, INT_TYPE=22, FLOAT_TYPE=23, 
		BOOL_TYPE=24, STRING_TYPE=25, AND=26, OR=27, NOT=28, ADD=29, MINUS=30, 
		MULT=31, DIV=32, ID=33, WS=34;
	public const int
		RULE_program = 0, RULE_statementOrNewline = 1, RULE_statement = 2, RULE_newline = 3, 
		RULE_decl = 4, RULE_loop = 5, RULE_whileLoop = 6, RULE_print = 7, RULE_expr = 8, 
		RULE_cmpOp = 9, RULE_assignment = 10, RULE_constant = 11, RULE_type = 12;
	public static readonly string[] ruleNames = {
		"program", "statementOrNewline", "statement", "newline", "decl", "loop", 
		"whileLoop", "print", "expr", "cmpOp", "assignment", "constant", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", "'\r'", "'=='", "'!='", "'<'", "'>'", "'>='", "'<='", "'var'", 
		"'while'", "'{'", "'}'", "'print'", "'('", "')'", "'='", null, null, null, 
		null, "'null'", "'int'", "'float'", "'bool'", "'string'", "'and'", "'or'", 
		"'!'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "VAR", "WHILE", 
		"LBRACKET", "RBRACKET", "PRINT", "LPAREN", "RPAREN", "ASSIGN", "INT", 
		"FLOAT", "BOOL", "STRING", "NULL", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", 
		"STRING_TYPE", "AND", "OR", "NOT", "ADD", "MINUS", "MULT", "DIV", "ID", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SimpleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SimpleParser.Eof, 0); }
		public StatementOrNewlineContext[] statementOrNewline() {
			return GetRuleContexts<StatementOrNewlineContext>();
		}
		public StatementOrNewlineContext statementOrNewline(int i) {
			return GetRuleContext<StatementOrNewlineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << VAR) | (1L << WHILE) | (1L << PRINT) | (1L << LPAREN) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << NULL) | (1L << NOT) | (1L << ID))) != 0)) {
				{
				{
				State = 26; statementOrNewline();
				}
				}
				State = 31;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 32; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementOrNewlineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public StatementOrNewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementOrNewline; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterStatementOrNewline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitStatementOrNewline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementOrNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementOrNewlineContext statementOrNewline() {
		StatementOrNewlineContext _localctx = new StatementOrNewlineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statementOrNewline);
		try {
			State = 36;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case VAR:
			case WHILE:
			case PRINT:
			case LPAREN:
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case NULL:
			case NOT:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; statement();
				}
				break;
			case T__0:
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; newline();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 38; expr(0);
				}
				break;

			case 2:
				{
				State = 39; decl();
				}
				break;

			case 3:
				{
				State = 40; assignment();
				}
				break;

			case 4:
				{
				State = 41; loop();
				}
				break;

			case 5:
				{
				State = 42; print();
				}
				break;
			}
			State = 45; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterNewline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitNewline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_newline);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 47;
					_la = _input.La(1);
					if ( !(_la==T__0 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 50;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(SimpleParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SimpleParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(VAR);
			State = 53; Match(ID);
			State = 54; Match(ASSIGN);
			State = 55; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; whileLoop();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(SimpleParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(SimpleParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(SimpleParser.RBRACKET, 0); }
		public StatementOrNewlineContext[] statementOrNewline() {
			return GetRuleContexts<StatementOrNewlineContext>();
		}
		public StatementOrNewlineContext statementOrNewline(int i) {
			return GetRuleContext<StatementOrNewlineContext>(i);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(WHILE);
			State = 60; expr(0);
			State = 61; Match(LBRACKET);
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << VAR) | (1L << WHILE) | (1L << PRINT) | (1L << LPAREN) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << NULL) | (1L << NOT) | (1L << ID))) != 0)) {
				{
				{
				State = 62; statementOrNewline();
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 68; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(SimpleParser.PRINT, 0); }
		public ITerminalNode LPAREN() { return GetToken(SimpleParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SimpleParser.RPAREN, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(PRINT);
			State = 71; Match(LPAREN);
			State = 72; expr(0);
			State = 73; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprParenContext : ExprContext {
		public ITerminalNode LPAREN() { return GetToken(SimpleParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SimpleParser.RPAREN, 0); }
		public ExprParenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterExprParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitExprParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprConstContext : ExprContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ExprConstContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterExprConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitExprConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIdContext : ExprContext {
		public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public ExprIdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterExprId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitExprId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBinaryOpContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(SimpleParser.DIV, 0); }
		public ITerminalNode MULT() { return GetToken(SimpleParser.MULT, 0); }
		public ITerminalNode ADD() { return GetToken(SimpleParser.ADD, 0); }
		public ITerminalNode MINUS() { return GetToken(SimpleParser.MINUS, 0); }
		public ExprBinaryOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterExprBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitExprBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprNotContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(SimpleParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprNotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterExprNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitExprNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprCmpContext : ExprContext {
		public ExprContext left;
		public CmpOpContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public ExprCmpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterExprCmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitExprCmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAndContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(SimpleParser.AND, 0); }
		public ExprAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOrContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(SimpleParser.OR, 0); }
		public ExprOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				{
				_localctx = new ExprParenContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 76; Match(LPAREN);
				State = 77; expr(0);
				State = 78; Match(RPAREN);
				}
				break;
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case NULL:
				{
				_localctx = new ExprConstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 80; constant();
				}
				break;
			case ID:
				{
				_localctx = new ExprIdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 81; Match(ID);
				}
				break;
			case NOT:
				{
				_localctx = new ExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 82; Match(NOT);
				State = 83; expr(4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 104;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 102;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
					case 1:
						{
						_localctx = new ExprBinaryOpContext(new ExprContext(_parentctx, _parentState));
						((ExprBinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 86;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 87;
						((ExprBinaryOpContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((ExprBinaryOpContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 88; ((ExprBinaryOpContext)_localctx).right = expr(7);
						}
						break;

					case 2:
						{
						_localctx = new ExprBinaryOpContext(new ExprContext(_parentctx, _parentState));
						((ExprBinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 89;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 90;
						((ExprBinaryOpContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==MINUS) ) {
							((ExprBinaryOpContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 91; ((ExprBinaryOpContext)_localctx).right = expr(6);
						}
						break;

					case 3:
						{
						_localctx = new ExprCmpContext(new ExprContext(_parentctx, _parentState));
						((ExprCmpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 92;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 93; ((ExprCmpContext)_localctx).op = cmpOp();
						State = 94; ((ExprCmpContext)_localctx).right = expr(4);
						}
						break;

					case 4:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						((ExprAndContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 96;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 97; ((ExprAndContext)_localctx).op = Match(AND);
						State = 98; ((ExprAndContext)_localctx).right = expr(3);
						}
						break;

					case 5:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						((ExprOrContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 100; ((ExprOrContext)_localctx).op = Match(OR);
						State = 101; ((ExprOrContext)_localctx).right = expr(2);
						}
						break;
					}
					} 
				}
				State = 106;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterCmpOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitCmpOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_cmpOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SimpleParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(ID);
			State = 110; Match(ASSIGN);
			State = 111; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(SimpleParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(SimpleParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(SimpleParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(SimpleParser.STRING, 0); }
		public ITerminalNode NULL() { return GetToken(SimpleParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << NULL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT_TYPE() { return GetToken(SimpleParser.INT_TYPE, 0); }
		public ITerminalNode FLOAT_TYPE() { return GetToken(SimpleParser.FLOAT_TYPE, 0); }
		public ITerminalNode BOOL_TYPE() { return GetToken(SimpleParser.BOOL_TYPE, 0); }
		public ITerminalNode STRING_TYPE() { return GetToken(SimpleParser.STRING_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_TYPE) | (1L << FLOAT_TYPE) | (1L << BOOL_TYPE) | (1L << STRING_TYPE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);

		case 4: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3$x\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4"+
		"\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\a\x2\x1E\n\x2\f\x2"+
		"\xE\x2!\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\'\n\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x5\x4.\n\x4\x3\x4\x3\x4\x3\x5\x6\x5\x33\n\x5\r\x5\xE\x5\x34"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\a\b\x42\n"+
		"\b\f\b\xE\b\x45\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\nW\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\ni\n\n\f\n\xE\nl"+
		"\v\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x2\x2\x3"+
		"\x12\xF\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16"+
		"\x2\x18\x2\x1A\x2\x2\b\x3\x2\x3\x4\x3\x2!\"\x3\x2\x1F \x3\x2\x5\n\x3\x2"+
		"\x13\x17\x3\x2\x18\x1Bz\x2\x1F\x3\x2\x2\x2\x4&\x3\x2\x2\x2\x6-\x3\x2\x2"+
		"\x2\b\x32\x3\x2\x2\x2\n\x36\x3\x2\x2\x2\f;\x3\x2\x2\x2\xE=\x3\x2\x2\x2"+
		"\x10H\x3\x2\x2\x2\x12V\x3\x2\x2\x2\x14m\x3\x2\x2\x2\x16o\x3\x2\x2\x2\x18"+
		"s\x3\x2\x2\x2\x1Au\x3\x2\x2\x2\x1C\x1E\x5\x4\x3\x2\x1D\x1C\x3\x2\x2\x2"+
		"\x1E!\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2\x1F \x3\x2\x2\x2 \"\x3\x2\x2\x2"+
		"!\x1F\x3\x2\x2\x2\"#\a\x2\x2\x3#\x3\x3\x2\x2\x2$\'\x5\x6\x4\x2%\'\x5\b"+
		"\x5\x2&$\x3\x2\x2\x2&%\x3\x2\x2\x2\'\x5\x3\x2\x2\x2(.\x5\x12\n\x2).\x5"+
		"\n\x6\x2*.\x5\x16\f\x2+.\x5\f\a\x2,.\x5\x10\t\x2-(\x3\x2\x2\x2-)\x3\x2"+
		"\x2\x2-*\x3\x2\x2\x2-+\x3\x2\x2\x2-,\x3\x2\x2\x2./\x3\x2\x2\x2/\x30\x5"+
		"\b\x5\x2\x30\a\x3\x2\x2\x2\x31\x33\t\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33"+
		"\x34\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\t\x3\x2\x2"+
		"\x2\x36\x37\a\v\x2\x2\x37\x38\a#\x2\x2\x38\x39\a\x12\x2\x2\x39:\x5\x12"+
		"\n\x2:\v\x3\x2\x2\x2;<\x5\xE\b\x2<\r\x3\x2\x2\x2=>\a\f\x2\x2>?\x5\x12"+
		"\n\x2?\x43\a\r\x2\x2@\x42\x5\x4\x3\x2\x41@\x3\x2\x2\x2\x42\x45\x3\x2\x2"+
		"\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x46\x3\x2\x2\x2\x45\x43"+
		"\x3\x2\x2\x2\x46G\a\xE\x2\x2G\xF\x3\x2\x2\x2HI\a\xF\x2\x2IJ\a\x10\x2\x2"+
		"JK\x5\x12\n\x2KL\a\x11\x2\x2L\x11\x3\x2\x2\x2MN\b\n\x1\x2NO\a\x10\x2\x2"+
		"OP\x5\x12\n\x2PQ\a\x11\x2\x2QW\x3\x2\x2\x2RW\x5\x18\r\x2SW\a#\x2\x2TU"+
		"\a\x1E\x2\x2UW\x5\x12\n\x6VM\x3\x2\x2\x2VR\x3\x2\x2\x2VS\x3\x2\x2\x2V"+
		"T\x3\x2\x2\x2Wj\x3\x2\x2\x2XY\f\b\x2\x2YZ\t\x3\x2\x2Zi\x5\x12\n\t[\\\f"+
		"\a\x2\x2\\]\t\x4\x2\x2]i\x5\x12\n\b^_\f\x5\x2\x2_`\x5\x14\v\x2`\x61\x5"+
		"\x12\n\x6\x61i\x3\x2\x2\x2\x62\x63\f\x4\x2\x2\x63\x64\a\x1C\x2\x2\x64"+
		"i\x5\x12\n\x5\x65\x66\f\x3\x2\x2\x66g\a\x1D\x2\x2gi\x5\x12\n\x4hX\x3\x2"+
		"\x2\x2h[\x3\x2\x2\x2h^\x3\x2\x2\x2h\x62\x3\x2\x2\x2h\x65\x3\x2\x2\x2i"+
		"l\x3\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2k\x13\x3\x2\x2\x2lj\x3\x2\x2"+
		"\x2mn\t\x5\x2\x2n\x15\x3\x2\x2\x2op\a#\x2\x2pq\a\x12\x2\x2qr\x5\x12\n"+
		"\x2r\x17\x3\x2\x2\x2st\t\x6\x2\x2t\x19\x3\x2\x2\x2uv\t\a\x2\x2v\x1B\x3"+
		"\x2\x2\x2\n\x1F&-\x34\x43Vhj";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Lanugage.Content
