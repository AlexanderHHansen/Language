//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ax111\Documents\PersonalDocuments\Coding\C#\Language\Lanugage\Content\Simple.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lanugage.Content {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISimpleListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SimpleBaseListener : ISimpleListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>constExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstExp([NotNull] SimpleParser.ConstExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>constExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstExp([NotNull] SimpleParser.ConstExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>idExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdExp([NotNull] SimpleParser.IdExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>idExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdExp([NotNull] SimpleParser.IdExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>parenExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExp([NotNull] SimpleParser.ParenExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExp([NotNull] SimpleParser.ParenExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>addExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddExp([NotNull] SimpleParser.AddExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddExp([NotNull] SimpleParser.AddExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>cmpExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCmpExp([NotNull] SimpleParser.CmpExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>cmpExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCmpExp([NotNull] SimpleParser.CmpExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>binOpExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinOpExp([NotNull] SimpleParser.BinOpExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>binOpExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinOpExp([NotNull] SimpleParser.BinOpExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>notExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExp([NotNull] SimpleParser.NotExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notExp</c>
	/// labeled alternative in <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExp([NotNull] SimpleParser.NotExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] SimpleParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] SimpleParser.ProgramContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.statementOrNewline"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementOrNewline([NotNull] SimpleParser.StatementOrNewlineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.statementOrNewline"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementOrNewline([NotNull] SimpleParser.StatementOrNewlineContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] SimpleParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] SimpleParser.StatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLoop([NotNull] SimpleParser.LoopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLoop([NotNull] SimpleParser.LoopContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.whileLoop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileLoop([NotNull] SimpleParser.WhileLoopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.whileLoop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileLoop([NotNull] SimpleParser.WhileLoopContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrint([NotNull] SimpleParser.PrintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrint([NotNull] SimpleParser.PrintContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] SimpleParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] SimpleParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.cmpOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCmpOp([NotNull] SimpleParser.CmpOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.cmpOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCmpOp([NotNull] SimpleParser.CmpOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.binaryBoolOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryBoolOp([NotNull] SimpleParser.BinaryBoolOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.binaryBoolOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryBoolOp([NotNull] SimpleParser.BinaryBoolOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.addOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddOp([NotNull] SimpleParser.AddOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.addOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddOp([NotNull] SimpleParser.AddOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.multOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultOp([NotNull] SimpleParser.MultOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.multOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultOp([NotNull] SimpleParser.MultOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.atomExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtomExp([NotNull] SimpleParser.AtomExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.atomExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtomExp([NotNull] SimpleParser.AtomExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] SimpleParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] SimpleParser.AssignmentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstant([NotNull] SimpleParser.ConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstant([NotNull] SimpleParser.ConstantContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] SimpleParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] SimpleParser.TypeContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Lanugage.Content
