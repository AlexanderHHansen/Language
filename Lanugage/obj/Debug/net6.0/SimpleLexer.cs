//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ax111\Documents\PersonalDocuments\Coding\C#\Language\Lanugage\Content\Simple.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lanugage.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SimpleLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, WHILE=9, 
		LBRACKET=10, RBRACKET=11, PRINT=12, LPAREN=13, RPAREN=14, ASSIGN=15, INT=16, 
		FLOAT=17, BOOL=18, STRING=19, NULL=20, INT_TYPE=21, FLOAT_TYPE=22, BOOL_TYPE=23, 
		STRING_TYPE=24, AND=25, OR=26, NOT=27, ADD=28, MINUS=29, MULT=30, DIV=31, 
		ID=32, WS=33;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "WHILE", 
		"LBRACKET", "RBRACKET", "PRINT", "LPAREN", "RPAREN", "ASSIGN", "INT", 
		"FLOAT", "BOOL", "STRING", "NULL", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", 
		"STRING_TYPE", "AND", "OR", "NOT", "ADD", "MINUS", "MULT", "DIV", "ID", 
		"WS"
	};


	public SimpleLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\n'", "'\r'", "'=='", "'!='", "'<'", "'>'", "'>='", "'<='", "'while'", 
		"'{'", "'}'", "'print'", "'('", "')'", "'='", null, null, null, null, 
		"'null'", "'int'", "'float'", "'bool'", "'string'", "'and'", "'or'", "'!'", 
		"'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "WHILE", "LBRACKET", 
		"RBRACKET", "PRINT", "LPAREN", "RPAREN", "ASSIGN", "INT", "FLOAT", "BOOL", 
		"STRING", "NULL", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "STRING_TYPE", 
		"AND", "OR", "NOT", "ADD", "MINUS", "MULT", "DIV", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2#\xCF\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x6\x11q\n\x11\r\x11\xE\x11r\x3"+
		"\x12\x6\x12v\n\x12\r\x12\xE\x12w\x3\x12\x3\x12\x6\x12|\n\x12\r\x12\xE"+
		"\x12}\x5\x12\x80\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\x8B\n\x13\x3\x14\x3\x14\a\x14\x8F\n\x14\f\x14\xE"+
		"\x14\x92\v\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\a!\xC4\n!\f"+
		"!\xE!\xC7\v!\x3\"\x6\"\xCA\n\"\r\"\xE\"\xCB\x3\"\x3\"\x2\x2\x2#\x3\x2"+
		"\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B"+
		"\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x3"+
		"\x2\x5\x6\x2\f\f\xF\xF$$^^\x5\x2\x43\\\x61\x61\x63|\x4\x2\v\v\"\"\xD6"+
		"\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2"+
		"\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2"+
		"\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2"+
		"\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3"+
		"\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2"+
		"\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2"+
		"\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2"+
		"\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2"+
		"\x2\x2\x43\x3\x2\x2\x2\x3\x45\x3\x2\x2\x2\x5G\x3\x2\x2\x2\aI\x3\x2\x2"+
		"\x2\tL\x3\x2\x2\x2\vO\x3\x2\x2\x2\rQ\x3\x2\x2\x2\xFS\x3\x2\x2\x2\x11V"+
		"\x3\x2\x2\x2\x13Y\x3\x2\x2\x2\x15_\x3\x2\x2\x2\x17\x61\x3\x2\x2\x2\x19"+
		"\x63\x3\x2\x2\x2\x1Bi\x3\x2\x2\x2\x1Dk\x3\x2\x2\x2\x1Fm\x3\x2\x2\x2!p"+
		"\x3\x2\x2\x2#u\x3\x2\x2\x2%\x8A\x3\x2\x2\x2\'\x8C\x3\x2\x2\x2)\x95\x3"+
		"\x2\x2\x2+\x9A\x3\x2\x2\x2-\x9E\x3\x2\x2\x2/\xA4\x3\x2\x2\x2\x31\xA9\x3"+
		"\x2\x2\x2\x33\xB0\x3\x2\x2\x2\x35\xB4\x3\x2\x2\x2\x37\xB7\x3\x2\x2\x2"+
		"\x39\xB9\x3\x2\x2\x2;\xBB\x3\x2\x2\x2=\xBD\x3\x2\x2\x2?\xBF\x3\x2\x2\x2"+
		"\x41\xC1\x3\x2\x2\x2\x43\xC9\x3\x2\x2\x2\x45\x46\a\f\x2\x2\x46\x4\x3\x2"+
		"\x2\x2GH\a\xF\x2\x2H\x6\x3\x2\x2\x2IJ\a?\x2\x2JK\a?\x2\x2K\b\x3\x2\x2"+
		"\x2LM\a#\x2\x2MN\a?\x2\x2N\n\x3\x2\x2\x2OP\a>\x2\x2P\f\x3\x2\x2\x2QR\a"+
		"@\x2\x2R\xE\x3\x2\x2\x2ST\a@\x2\x2TU\a?\x2\x2U\x10\x3\x2\x2\x2VW\a>\x2"+
		"\x2WX\a?\x2\x2X\x12\x3\x2\x2\x2YZ\ay\x2\x2Z[\aj\x2\x2[\\\ak\x2\x2\\]\a"+
		"n\x2\x2]^\ag\x2\x2^\x14\x3\x2\x2\x2_`\a}\x2\x2`\x16\x3\x2\x2\x2\x61\x62"+
		"\a\x7F\x2\x2\x62\x18\x3\x2\x2\x2\x63\x64\ar\x2\x2\x64\x65\at\x2\x2\x65"+
		"\x66\ak\x2\x2\x66g\ap\x2\x2gh\av\x2\x2h\x1A\x3\x2\x2\x2ij\a*\x2\x2j\x1C"+
		"\x3\x2\x2\x2kl\a+\x2\x2l\x1E\x3\x2\x2\x2mn\a?\x2\x2n \x3\x2\x2\x2oq\x4"+
		"\x32;\x2po\x3\x2\x2\x2qr\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2s\"\x3"+
		"\x2\x2\x2tv\x4\x32;\x2ut\x3\x2\x2\x2vw\x3\x2\x2\x2wu\x3\x2\x2\x2wx\x3"+
		"\x2\x2\x2x\x7F\x3\x2\x2\x2y{\a\x30\x2\x2z|\x4\x32;\x2{z\x3\x2\x2\x2|}"+
		"\x3\x2\x2\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\x80\x3\x2\x2\x2\x7Fy\x3\x2\x2"+
		"\x2\x7F\x80\x3\x2\x2\x2\x80$\x3\x2\x2\x2\x81\x82\av\x2\x2\x82\x83\at\x2"+
		"\x2\x83\x84\aw\x2\x2\x84\x8B\ag\x2\x2\x85\x86\ah\x2\x2\x86\x87\a\x63\x2"+
		"\x2\x87\x88\an\x2\x2\x88\x89\au\x2\x2\x89\x8B\ag\x2\x2\x8A\x81\x3\x2\x2"+
		"\x2\x8A\x85\x3\x2\x2\x2\x8B&\x3\x2\x2\x2\x8C\x90\a$\x2\x2\x8D\x8F\n\x2"+
		"\x2\x2\x8E\x8D\x3\x2\x2\x2\x8F\x92\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x90"+
		"\x91\x3\x2\x2\x2\x91\x93\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x93\x94\a$\x2"+
		"\x2\x94(\x3\x2\x2\x2\x95\x96\ap\x2\x2\x96\x97\aw\x2\x2\x97\x98\an\x2\x2"+
		"\x98\x99\an\x2\x2\x99*\x3\x2\x2\x2\x9A\x9B\ak\x2\x2\x9B\x9C\ap\x2\x2\x9C"+
		"\x9D\av\x2\x2\x9D,\x3\x2\x2\x2\x9E\x9F\ah\x2\x2\x9F\xA0\an\x2\x2\xA0\xA1"+
		"\aq\x2\x2\xA1\xA2\a\x63\x2\x2\xA2\xA3\av\x2\x2\xA3.\x3\x2\x2\x2\xA4\xA5"+
		"\a\x64\x2\x2\xA5\xA6\aq\x2\x2\xA6\xA7\aq\x2\x2\xA7\xA8\an\x2\x2\xA8\x30"+
		"\x3\x2\x2\x2\xA9\xAA\au\x2\x2\xAA\xAB\av\x2\x2\xAB\xAC\at\x2\x2\xAC\xAD"+
		"\ak\x2\x2\xAD\xAE\ap\x2\x2\xAE\xAF\ai\x2\x2\xAF\x32\x3\x2\x2\x2\xB0\xB1"+
		"\a\x63\x2\x2\xB1\xB2\ap\x2\x2\xB2\xB3\a\x66\x2\x2\xB3\x34\x3\x2\x2\x2"+
		"\xB4\xB5\aq\x2\x2\xB5\xB6\at\x2\x2\xB6\x36\x3\x2\x2\x2\xB7\xB8\a#\x2\x2"+
		"\xB8\x38\x3\x2\x2\x2\xB9\xBA\a-\x2\x2\xBA:\x3\x2\x2\x2\xBB\xBC\a/\x2\x2"+
		"\xBC<\x3\x2\x2\x2\xBD\xBE\a,\x2\x2\xBE>\x3\x2\x2\x2\xBF\xC0\a\x31\x2\x2"+
		"\xC0@\x3\x2\x2\x2\xC1\xC5\t\x3\x2\x2\xC2\xC4\t\x3\x2\x2\xC3\xC2\x3\x2"+
		"\x2\x2\xC4\xC7\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6"+
		"\x42\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xCA\t\x4\x2\x2\xC9\xC8\x3\x2"+
		"\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC"+
		"\xCD\x3\x2\x2\x2\xCD\xCE\b\"\x2\x2\xCE\x44\x3\x2\x2\x2\v\x2rw}\x7F\x8A"+
		"\x90\xC5\xCB\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Lanugage.Content
