//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ax111\Documents\PersonalDocuments\Coding\C#\Language\Lanugage\Content\Simple.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lanugage.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SimpleLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, VAR=9, 
		WHILE=10, LBRACKET=11, RBRACKET=12, PRINT=13, LPAREN=14, RPAREN=15, ASSIGN=16, 
		INT=17, FLOAT=18, BOOL=19, STRING=20, NULL=21, INT_TYPE=22, FLOAT_TYPE=23, 
		BOOL_TYPE=24, STRING_TYPE=25, AND=26, OR=27, NOT=28, ADD=29, MINUS=30, 
		MULT=31, DIV=32, ID=33, WS=34;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "VAR", 
		"WHILE", "LBRACKET", "RBRACKET", "PRINT", "LPAREN", "RPAREN", "ASSIGN", 
		"INT", "FLOAT", "BOOL", "STRING", "NULL", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", 
		"STRING_TYPE", "AND", "OR", "NOT", "ADD", "MINUS", "MULT", "DIV", "ID", 
		"WS"
	};


	public SimpleLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\n'", "'\r'", "'=='", "'!='", "'<'", "'>'", "'>='", "'<='", "'var'", 
		"'while'", "'{'", "'}'", "'print'", "'('", "')'", "'='", null, null, null, 
		null, "'null'", "'int'", "'float'", "'bool'", "'string'", "'and'", "'or'", 
		"'!'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "VAR", "WHILE", 
		"LBRACKET", "RBRACKET", "PRINT", "LPAREN", "RPAREN", "ASSIGN", "INT", 
		"FLOAT", "BOOL", "STRING", "NULL", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", 
		"STRING_TYPE", "AND", "OR", "NOT", "ADD", "MINUS", "MULT", "DIV", "ID", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2$\xD5\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x12\x6\x12w\n\x12\r\x12\xE\x12x\x3\x13\x6\x13|\n\x13\r\x13\xE\x13}\x3"+
		"\x13\x3\x13\x6\x13\x82\n\x13\r\x13\xE\x13\x83\x5\x13\x86\n\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x91\n"+
		"\x14\x3\x15\x3\x15\a\x15\x95\n\x15\f\x15\xE\x15\x98\v\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3!\x3!\x3\"\x3\"\a\"\xCA\n\"\f\"\xE\"\xCD\v\"\x3#\x6#\xD0\n"+
		"#\r#\xE#\xD1\x3#\x3#\x2\x2\x2$\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2"+
		"\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2"+
		"\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2"+
		"\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2"+
		"\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$\x3\x2\x5\x6\x2\f\f\xF"+
		"\xF$$^^\x5\x2\x43\\\x61\x61\x63|\x4\x2\v\v\"\"\xDC\x2\x3\x3\x2\x2\x2\x2"+
		"\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2"+
		"\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2"+
		"\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2"+
		"\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2"+
		"\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2"+
		"\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2"+
		"\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2"+
		"\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2"+
		"\x2\x2\x45\x3\x2\x2\x2\x3G\x3\x2\x2\x2\x5I\x3\x2\x2\x2\aK\x3\x2\x2\x2"+
		"\tN\x3\x2\x2\x2\vQ\x3\x2\x2\x2\rS\x3\x2\x2\x2\xFU\x3\x2\x2\x2\x11X\x3"+
		"\x2\x2\x2\x13[\x3\x2\x2\x2\x15_\x3\x2\x2\x2\x17\x65\x3\x2\x2\x2\x19g\x3"+
		"\x2\x2\x2\x1Bi\x3\x2\x2\x2\x1Do\x3\x2\x2\x2\x1Fq\x3\x2\x2\x2!s\x3\x2\x2"+
		"\x2#v\x3\x2\x2\x2%{\x3\x2\x2\x2\'\x90\x3\x2\x2\x2)\x92\x3\x2\x2\x2+\x9B"+
		"\x3\x2\x2\x2-\xA0\x3\x2\x2\x2/\xA4\x3\x2\x2\x2\x31\xAA\x3\x2\x2\x2\x33"+
		"\xAF\x3\x2\x2\x2\x35\xB6\x3\x2\x2\x2\x37\xBA\x3\x2\x2\x2\x39\xBD\x3\x2"+
		"\x2\x2;\xBF\x3\x2\x2\x2=\xC1\x3\x2\x2\x2?\xC3\x3\x2\x2\x2\x41\xC5\x3\x2"+
		"\x2\x2\x43\xC7\x3\x2\x2\x2\x45\xCF\x3\x2\x2\x2GH\a\f\x2\x2H\x4\x3\x2\x2"+
		"\x2IJ\a\xF\x2\x2J\x6\x3\x2\x2\x2KL\a?\x2\x2LM\a?\x2\x2M\b\x3\x2\x2\x2"+
		"NO\a#\x2\x2OP\a?\x2\x2P\n\x3\x2\x2\x2QR\a>\x2\x2R\f\x3\x2\x2\x2ST\a@\x2"+
		"\x2T\xE\x3\x2\x2\x2UV\a@\x2\x2VW\a?\x2\x2W\x10\x3\x2\x2\x2XY\a>\x2\x2"+
		"YZ\a?\x2\x2Z\x12\x3\x2\x2\x2[\\\ax\x2\x2\\]\a\x63\x2\x2]^\at\x2\x2^\x14"+
		"\x3\x2\x2\x2_`\ay\x2\x2`\x61\aj\x2\x2\x61\x62\ak\x2\x2\x62\x63\an\x2\x2"+
		"\x63\x64\ag\x2\x2\x64\x16\x3\x2\x2\x2\x65\x66\a}\x2\x2\x66\x18\x3\x2\x2"+
		"\x2gh\a\x7F\x2\x2h\x1A\x3\x2\x2\x2ij\ar\x2\x2jk\at\x2\x2kl\ak\x2\x2lm"+
		"\ap\x2\x2mn\av\x2\x2n\x1C\x3\x2\x2\x2op\a*\x2\x2p\x1E\x3\x2\x2\x2qr\a"+
		"+\x2\x2r \x3\x2\x2\x2st\a?\x2\x2t\"\x3\x2\x2\x2uw\x4\x32;\x2vu\x3\x2\x2"+
		"\x2wx\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2y$\x3\x2\x2\x2z|\x4\x32;"+
		"\x2{z\x3\x2\x2\x2|}\x3\x2\x2\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\x85\x3\x2"+
		"\x2\x2\x7F\x81\a\x30\x2\x2\x80\x82\x4\x32;\x2\x81\x80\x3\x2\x2\x2\x82"+
		"\x83\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x86\x3\x2"+
		"\x2\x2\x85\x7F\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86&\x3\x2\x2\x2\x87\x88"+
		"\av\x2\x2\x88\x89\at\x2\x2\x89\x8A\aw\x2\x2\x8A\x91\ag\x2\x2\x8B\x8C\a"+
		"h\x2\x2\x8C\x8D\a\x63\x2\x2\x8D\x8E\an\x2\x2\x8E\x8F\au\x2\x2\x8F\x91"+
		"\ag\x2\x2\x90\x87\x3\x2\x2\x2\x90\x8B\x3\x2\x2\x2\x91(\x3\x2\x2\x2\x92"+
		"\x96\a$\x2\x2\x93\x95\n\x2\x2\x2\x94\x93\x3\x2\x2\x2\x95\x98\x3\x2\x2"+
		"\x2\x96\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x99\x3\x2\x2\x2\x98\x96"+
		"\x3\x2\x2\x2\x99\x9A\a$\x2\x2\x9A*\x3\x2\x2\x2\x9B\x9C\ap\x2\x2\x9C\x9D"+
		"\aw\x2\x2\x9D\x9E\an\x2\x2\x9E\x9F\an\x2\x2\x9F,\x3\x2\x2\x2\xA0\xA1\a"+
		"k\x2\x2\xA1\xA2\ap\x2\x2\xA2\xA3\av\x2\x2\xA3.\x3\x2\x2\x2\xA4\xA5\ah"+
		"\x2\x2\xA5\xA6\an\x2\x2\xA6\xA7\aq\x2\x2\xA7\xA8\a\x63\x2\x2\xA8\xA9\a"+
		"v\x2\x2\xA9\x30\x3\x2\x2\x2\xAA\xAB\a\x64\x2\x2\xAB\xAC\aq\x2\x2\xAC\xAD"+
		"\aq\x2\x2\xAD\xAE\an\x2\x2\xAE\x32\x3\x2\x2\x2\xAF\xB0\au\x2\x2\xB0\xB1"+
		"\av\x2\x2\xB1\xB2\at\x2\x2\xB2\xB3\ak\x2\x2\xB3\xB4\ap\x2\x2\xB4\xB5\a"+
		"i\x2\x2\xB5\x34\x3\x2\x2\x2\xB6\xB7\a\x63\x2\x2\xB7\xB8\ap\x2\x2\xB8\xB9"+
		"\a\x66\x2\x2\xB9\x36\x3\x2\x2\x2\xBA\xBB\aq\x2\x2\xBB\xBC\at\x2\x2\xBC"+
		"\x38\x3\x2\x2\x2\xBD\xBE\a#\x2\x2\xBE:\x3\x2\x2\x2\xBF\xC0\a-\x2\x2\xC0"+
		"<\x3\x2\x2\x2\xC1\xC2\a/\x2\x2\xC2>\x3\x2\x2\x2\xC3\xC4\a,\x2\x2\xC4@"+
		"\x3\x2\x2\x2\xC5\xC6\a\x31\x2\x2\xC6\x42\x3\x2\x2\x2\xC7\xCB\t\x3\x2\x2"+
		"\xC8\xCA\t\x3\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA\xCD\x3\x2\x2\x2\xCB\xC9\x3"+
		"\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\x44\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2"+
		"\xCE\xD0\t\x4\x2\x2\xCF\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xCF\x3"+
		"\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4\b#\x2\x2\xD4"+
		"\x46\x3\x2\x2\x2\v\x2x}\x83\x85\x90\x96\xCB\xD1\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Lanugage.Content
