//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ax111\Documents\PersonalDocuments\Coding\C#\Language\Lanugage\Content\Simple.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lanugage.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SimpleLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, WHILE=9, 
		LBRACKET=10, RBRACKET=11, PRINT=12, LPAREN=13, RPAREN=14, AND=15, OR=16, 
		NOT=17, ARITHMETIC=18, ASSIGN=19, INT=20, FLOAT=21, BOOL=22, STRING=23, 
		NULL=24, INT_TYPE=25, FLOAT_TYPE=26, BOOL_TYPE=27, STRING_TYPE=28, ID=29, 
		WS=30;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "WHILE", 
		"LBRACKET", "RBRACKET", "PRINT", "LPAREN", "RPAREN", "AND", "OR", "NOT", 
		"ARITHMETIC", "ASSIGN", "INT", "FLOAT", "BOOL", "STRING", "NULL", "INT_TYPE", 
		"FLOAT_TYPE", "BOOL_TYPE", "STRING_TYPE", "ID", "WS"
	};


	public SimpleLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\n'", "'\r'", "'=='", "'!='", "'<'", "'>'", "'>='", "'<='", "'while'", 
		"'{'", "'}'", "'print'", "'('", "')'", "'and'", "'or'", "'!'", null, "'='", 
		null, null, null, null, "'null'", "'int'", "'float'", "'bool'", "'string'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "WHILE", "LBRACKET", 
		"RBRACKET", "PRINT", "LPAREN", "RPAREN", "AND", "OR", "NOT", "ARITHMETIC", 
		"ASSIGN", "INT", "FLOAT", "BOOL", "STRING", "NULL", "INT_TYPE", "FLOAT_TYPE", 
		"BOOL_TYPE", "STRING_TYPE", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2 \xC3\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a"+
		"\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v"+
		"\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x15\x6\x15v\n\x15\r\x15\xE\x15w\x3\x16\x6\x16{\n\x16"+
		"\r\x16\xE\x16|\x3\x16\x3\x16\x6\x16\x81\n\x16\r\x16\xE\x16\x82\x5\x16"+
		"\x85\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x5\x17\x90\n\x17\x3\x18\x3\x18\a\x18\x94\n\x18\f\x18\xE\x18\x97\v"+
		"\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1E\x3\x1E\a\x1E\xB8\n\x1E\f\x1E\xE\x1E\xBB\v\x1E\x3\x1F\x6\x1F\xBE\n"+
		"\x1F\r\x1F\xE\x1F\xBF\x3\x1F\x3\x1F\x2\x2\x2 \x3\x2\x3\x5\x2\x4\a\x2\x5"+
		"\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19"+
		"\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15"+
		")\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37"+
		"\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 \x3\x2\x6\x5\x2,-//\x31\x31\x6\x2\f\f\xF"+
		"\xF$$^^\x5\x2\x43\\\x61\x61\x63|\x4\x2\v\v\"\"\xCA\x2\x3\x3\x2\x2\x2\x2"+
		"\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2"+
		"\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2"+
		"\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2"+
		"\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2"+
		"\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2"+
		"\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2"+
		"\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2"+
		"\x2\x2=\x3\x2\x2\x2\x3?\x3\x2\x2\x2\x5\x41\x3\x2\x2\x2\a\x43\x3\x2\x2"+
		"\x2\t\x46\x3\x2\x2\x2\vI\x3\x2\x2\x2\rK\x3\x2\x2\x2\xFM\x3\x2\x2\x2\x11"+
		"P\x3\x2\x2\x2\x13S\x3\x2\x2\x2\x15Y\x3\x2\x2\x2\x17[\x3\x2\x2\x2\x19]"+
		"\x3\x2\x2\x2\x1B\x63\x3\x2\x2\x2\x1D\x65\x3\x2\x2\x2\x1Fg\x3\x2\x2\x2"+
		"!k\x3\x2\x2\x2#n\x3\x2\x2\x2%p\x3\x2\x2\x2\'r\x3\x2\x2\x2)u\x3\x2\x2\x2"+
		"+z\x3\x2\x2\x2-\x8F\x3\x2\x2\x2/\x91\x3\x2\x2\x2\x31\x9A\x3\x2\x2\x2\x33"+
		"\x9F\x3\x2\x2\x2\x35\xA3\x3\x2\x2\x2\x37\xA9\x3\x2\x2\x2\x39\xAE\x3\x2"+
		"\x2\x2;\xB5\x3\x2\x2\x2=\xBD\x3\x2\x2\x2?@\a\f\x2\x2@\x4\x3\x2\x2\x2\x41"+
		"\x42\a\xF\x2\x2\x42\x6\x3\x2\x2\x2\x43\x44\a?\x2\x2\x44\x45\a?\x2\x2\x45"+
		"\b\x3\x2\x2\x2\x46G\a#\x2\x2GH\a?\x2\x2H\n\x3\x2\x2\x2IJ\a>\x2\x2J\f\x3"+
		"\x2\x2\x2KL\a@\x2\x2L\xE\x3\x2\x2\x2MN\a@\x2\x2NO\a?\x2\x2O\x10\x3\x2"+
		"\x2\x2PQ\a>\x2\x2QR\a?\x2\x2R\x12\x3\x2\x2\x2ST\ay\x2\x2TU\aj\x2\x2UV"+
		"\ak\x2\x2VW\an\x2\x2WX\ag\x2\x2X\x14\x3\x2\x2\x2YZ\a}\x2\x2Z\x16\x3\x2"+
		"\x2\x2[\\\a\x7F\x2\x2\\\x18\x3\x2\x2\x2]^\ar\x2\x2^_\at\x2\x2_`\ak\x2"+
		"\x2`\x61\ap\x2\x2\x61\x62\av\x2\x2\x62\x1A\x3\x2\x2\x2\x63\x64\a*\x2\x2"+
		"\x64\x1C\x3\x2\x2\x2\x65\x66\a+\x2\x2\x66\x1E\x3\x2\x2\x2gh\a\x63\x2\x2"+
		"hi\ap\x2\x2ij\a\x66\x2\x2j \x3\x2\x2\x2kl\aq\x2\x2lm\at\x2\x2m\"\x3\x2"+
		"\x2\x2no\a#\x2\x2o$\x3\x2\x2\x2pq\t\x2\x2\x2q&\x3\x2\x2\x2rs\a?\x2\x2"+
		"s(\x3\x2\x2\x2tv\x4\x32;\x2ut\x3\x2\x2\x2vw\x3\x2\x2\x2wu\x3\x2\x2\x2"+
		"wx\x3\x2\x2\x2x*\x3\x2\x2\x2y{\x4\x32;\x2zy\x3\x2\x2\x2{|\x3\x2\x2\x2"+
		"|z\x3\x2\x2\x2|}\x3\x2\x2\x2}\x84\x3\x2\x2\x2~\x80\a\x30\x2\x2\x7F\x81"+
		"\x4\x32;\x2\x80\x7F\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2"+
		"\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84~\x3\x2\x2\x2\x84\x85\x3\x2"+
		"\x2\x2\x85,\x3\x2\x2\x2\x86\x87\av\x2\x2\x87\x88\at\x2\x2\x88\x89\aw\x2"+
		"\x2\x89\x90\ag\x2\x2\x8A\x8B\ah\x2\x2\x8B\x8C\a\x63\x2\x2\x8C\x8D\an\x2"+
		"\x2\x8D\x8E\au\x2\x2\x8E\x90\ag\x2\x2\x8F\x86\x3\x2\x2\x2\x8F\x8A\x3\x2"+
		"\x2\x2\x90.\x3\x2\x2\x2\x91\x95\a$\x2\x2\x92\x94\n\x3\x2\x2\x93\x92\x3"+
		"\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2"+
		"\x96\x98\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x99\a$\x2\x2\x99\x30\x3\x2"+
		"\x2\x2\x9A\x9B\ap\x2\x2\x9B\x9C\aw\x2\x2\x9C\x9D\an\x2\x2\x9D\x9E\an\x2"+
		"\x2\x9E\x32\x3\x2\x2\x2\x9F\xA0\ak\x2\x2\xA0\xA1\ap\x2\x2\xA1\xA2\av\x2"+
		"\x2\xA2\x34\x3\x2\x2\x2\xA3\xA4\ah\x2\x2\xA4\xA5\an\x2\x2\xA5\xA6\aq\x2"+
		"\x2\xA6\xA7\a\x63\x2\x2\xA7\xA8\av\x2\x2\xA8\x36\x3\x2\x2\x2\xA9\xAA\a"+
		"\x64\x2\x2\xAA\xAB\aq\x2\x2\xAB\xAC\aq\x2\x2\xAC\xAD\an\x2\x2\xAD\x38"+
		"\x3\x2\x2\x2\xAE\xAF\au\x2\x2\xAF\xB0\av\x2\x2\xB0\xB1\at\x2\x2\xB1\xB2"+
		"\ak\x2\x2\xB2\xB3\ap\x2\x2\xB3\xB4\ai\x2\x2\xB4:\x3\x2\x2\x2\xB5\xB9\t"+
		"\x4\x2\x2\xB6\xB8\t\x4\x2\x2\xB7\xB6\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9"+
		"\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA<\x3\x2\x2\x2\xBB\xB9\x3\x2\x2"+
		"\x2\xBC\xBE\t\x5\x2\x2\xBD\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xBD"+
		"\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\b\x1F\x2"+
		"\x2\xC2>\x3\x2\x2\x2\v\x2w|\x82\x84\x8F\x95\xB9\xBF\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Lanugage.Content
